package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short VOID = 4;
		static public final short BOOLEAN = 5;
		static public final short INT = 6;
		static public final short MINUS = 7;
		static public final short STRING_LITERAL = 8;
		static public final short INT_LITERAL = 9;
		static public final short TRUE = 10;
		static public final short FALSE = 11;
		static public final short RPAREN = 12;
		static public final short RCURLY = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short IF = 16;
		static public final short WHILE = 17;
		static public final short BREAK = 18;
		static public final short RETURN = 19;
		static public final short COMMA = 20;
		static public final short RBRACKET = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLdbK5LKO$ysyb9O768jQcPeYcuX0Y22oPG82agbGsaQRYfb6gLbgOdiMTQfJdUgFbdF" +
		"Yd58KpTGMsnVRjJsJigneiInjqSo#VZDpUOtZUpEyKtXwx$pkzzrlc#$U#UQx5z0te1$6Om" +
		"BEG3x6eWndunoSZoceHY4kHHv6e2TwuoWSZMFG1yUYB#B2zkWLjiSWJu$13Wyl#o5XscSvx" +
		"2TYAcRWJ9o5Eep6kJWFqt41T6b3WYn54j9nF8Q5iF8PLZZ4msg9QHKHiAeAcU6fPePU#aP4" +
		"exzwIct0kjnXNOm1j9hc4Yt5Z1Oyvp7enfolTr#PxCD8xjAUJgmim#LPYvXd0c8w4MMun$u" +
		"KUEWhFFIdUUWlT5b5bEcL4#9zd132w#1AhTnETEJcPblQATkkabw4I1o7M8xToH#Amr32yN" +
		"0S0RyQ6p4BySglY7m3BiObc8qvc8j6sIsxbUuAOpNoAHBbMrp7$vMM12TX74vMOmzfbtRSW" +
		"6JM$K2a8Wtp#H#AnSZ6PSZaitCnYbz69OvanIuWNuDJC1cJYDDHZyin4$FaEooKRt0Lhi7L" +
		"k1OtuYPOloL8P8KdywjBPOzBOzzAP#mCnirYrMUpxdDOtxbcXUNpkofWlVqVFRhQNeCE7tj" +
		"gDxxp2FET6s#wBsiWYk#f1$S#XXKHt4ephQ8yh7gPLf41AwyClVIQ#HphALKkreQLcxuZMh" +
		"2STNQGA7wvxYi3pzjmLXPg5tL6yVzd#zFL#k2hiBoYGtg7Nll1amRFxT$RTfKqWZqsdhLHn" +
		"DuNmJuzYhUCqUo85Uo9rgZnRXMf$Ah9zsV$7i1kci2Rd$5rTkYirHXpF#zZlNaJioJMlSmQ" +
		"VTJvMVS#rdqqkNwyeSPn5ir$AUV5f2NCCvudb4v9YUaHnnFBG3nFBR$fPr2DQ#Z9cOPeCN$" +
		"i0a1JezMR3T9AD1CjW3wRz0b0ooG$XpIfKHbPzde3X#saTn2BgAyahQNiDjAfAkP3v1VO$P" +
		"pWJsXJhMBUecJho2zKihiP#sNIsqbZI1UJ3bAw#ybl8hsNj5p9xhIejbJDxzd$ULeVOelIJ" +
		"IRVJbf7kfDq7ka#fOkrhVLX8eMuIysNAJe$#9hqvKGsqQpczobQH3pWjXz1ObKG3pfaDKHB" +
		"9$qxzg69M47cUzARYPLSwmI7xNhY4M8jiSecRrNqEMBrFtACj$5jr0sq#IGUc8jsgqrVry6" +
		"p43VR#5tXx8$j#Nx7l4rHLIieiEKHgsGrZlnoGiVNIbNUgHpU99r6cL7xzQJRbCqUXq$jWN" +
		"7qMIvhQBRPpL0nff2VsTbzK77M1Cb$RZWnL0uDYjORFI1Ctqb1ycg2#ibU#Ska7ELt#Kr#X" +
		"UCdlvZZL$AbR9Clv7FPAf$9HafOlxB5r7qIiFsOs1oOVKHyI7n0l2$loZl2FYQRX6zDtY1U" +
		"8bZ9yfGyQMZ8lIKRvMrvKPwHfsMz$2m$oGvJ$gYqoYhILbafpygFyeDibyTbdQoLDVAOh3P" +
		"jLiXoQJ6vPVA2F2#loslogcoGLuHTIzxRRqrVomxP5PZjPBNlbJzD$WyE4tccQ0Hun#lEdc" +
		"$STy2#x#CPenFWEQC5C8RdKGLFaahp9D42IB8XcRx6kJ2MlcNaoqXBES#XBXGAgI#atN3Qv" +
		"n9vFENoU5wD8FAf6sd2nrkgphk7PYARyrHI0uEPat4V6KPPDMamP55dt0MB5J8vDsuZ9JQa" +
		"C7uAQPeBXl1PLRGhftyvSqud7KgvWGpou$u6FsMB80==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Accessibility = PUBLIC
			Action.NONE,  	// [1] Accessibility = 
			RETURN6,	// [2] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [3] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [4] Imports = 
			RETURN3,	// [5] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [6] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [7] Declarations = 
			Action.RETURN,	// [8] Declaration = Function
			Action.RETURN,	// [9] Declaration = Field
			Action.RETURN,	// [10] Declaration = Type_D
			RETURN9,	// [11] Function = Accessibility Type_Name ID LPAREN ParamList RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [12] Field = Accessibility Type_Name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [13] Type_D = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [14] Type_Name = Primitive
			Action.RETURN,	// [15] Type_Name = Array
			Action.RETURN,	// [16] Type_Name = ID
			Action.RETURN,	// [17] Primitive = VOID
			Action.RETURN,	// [18] Primitive = BOOLEAN
			Action.RETURN,	// [19] Primitive = INT
			RETURN3,	// [20] Array = Type_Name LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [21] ParamList = Parameter ParamListTail; returns 'ParamListTail' although none is marked
			Action.NONE,  	// [22] ParamList = 
			RETURN3,	// [23] ParamListTail = COMMA Parameter ParamListTail; returns 'ParamListTail' although none is marked
			Action.NONE,  	// [24] ParamListTail = 
			RETURN2,	// [25] Parameter = Type_Name ID; returns 'ID' although none is marked
			Action.RETURN,	// [26] Statement = Local_Variable
			Action.RETURN,	// [27] Statement = Block_Statements
			Action.RETURN,	// [28] Statement = If_Statement
			Action.RETURN,	// [29] Statement = While_Statement
			Action.RETURN,	// [30] Statement = Break_Statement
			Action.RETURN,	// [31] Statement = Return_Statement
			Action.RETURN,	// [32] Statement = Expression_Statement
			RETURN2,	// [33] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [34] StatementList = 
			RETURN3,	// [35] Local_Variable = Type_Name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [36] Block_Statements = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN7,	// [37] If_Statement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [38] If_Statement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN5,	// [39] While_Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [40] Break_Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [41] Return_Statement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [42] Return_Statement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [43] Expression_Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [44] Expression = Assignment
			Action.RETURN,	// [45] Expression = RHS_Expression
			RETURN3,	// [46] Assignment = LHS_Expression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [47] LHS_Expression = Type_Name
			Action.RETURN,	// [48] LHS_Expression = Array_Access
			RETURN4,	// [49] Array_Access = LHS_Expression LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [50] RHS_Expression = Arithmetic_Expression
			RETURN3,	// [51] RHS_Expression = Arithmetic_Expression Compare Arithmetic_Expression; returns 'Arithmetic_Expression' although none is marked
			Action.RETURN,	// [52] Compare = EQEQ
			Action.RETURN,	// [53] Compare = NEQ
			Action.RETURN,	// [54] Compare = LT
			Action.RETURN,	// [55] Compare = LEQ
			Action.RETURN,	// [56] Compare = GT
			Action.RETURN,	// [57] Compare = GEQ
			new Action() {	// [58] Arithmetic_Expression = Arithmetic_Expression Add Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [59] Arithmetic_Expression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [60] Add = PLUS
			Action.RETURN,	// [61] Add = MINUS
			new Action() {	// [62] Term = Term Mul Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [63] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [64] Mul = TIMES
			Action.RETURN,	// [65] Mul = DIV
			Action.RETURN,	// [66] Mul = MOD
			RETURN2,	// [67] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [68] Factor = Primary_Expression
			Action.RETURN,	// [69] Primary_Expression = LHS_Expression
			Action.RETURN,	// [70] Primary_Expression = Function_Call
			Action.RETURN,	// [71] Primary_Expression = Array_Expression
			Action.RETURN,	// [72] Primary_Expression = STRING_LITERAL
			Action.RETURN,	// [73] Primary_Expression = INT_LITERAL
			Action.RETURN,	// [74] Primary_Expression = Boolean_Literal
			Action.RETURN,	// [75] Primary_Expression = Paren_Expression
			RETURN4,	// [76] Function_Call = ID LPAREN ExpressionList RPAREN; returns 'RPAREN' although none is marked
			RETURN2,	// [77] ExpressionList = Expression ExpressionListTail; returns 'ExpressionListTail' although none is marked
			RETURN3,	// [78] ExpressionListTail = COMMA Expression ExpressionListTail; returns 'ExpressionListTail' although none is marked
			Action.NONE,  	// [79] ExpressionListTail = 
			RETURN3,	// [80] Array_Expression = LBRACKET ExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [81] Boolean_Literal = TRUE
			Action.RETURN,	// [82] Boolean_Literal = FALSE
			RETURN3	// [83] Paren_Expression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
