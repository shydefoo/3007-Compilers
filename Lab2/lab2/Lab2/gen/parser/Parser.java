package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short VOID = 4;
		static public final short BOOLEAN = 5;
		static public final short INT = 6;
		static public final short MINUS = 7;
		static public final short STRING_LITERAL = 8;
		static public final short INT_LITERAL = 9;
		static public final short TRUE = 10;
		static public final short FALSE = 11;
		static public final short RCURLY = 12;
		static public final short RPAREN = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short IF = 16;
		static public final short WHILE = 17;
		static public final short BREAK = 18;
		static public final short RETURN = 19;
		static public final short COMMA = 20;
		static public final short RBRACKET = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9p5LdbKL5KO$yqR2QnXHXG2ArgKM4H0G3GjsK8GHCL2osmlMz0sonRJDBNCfJodJdLETax" +
		"$r3dbbYsMBLQYfbAQ8bgIQOjMfcMMhLPVl$VcCZoUR#RDQDZC#Rtltc#$ztttlW$G3k8ir6" +
		"84hi0034Cbhi6rk1ute0R5k0VduZoSZ5DmAav3Cax76JWJ6k8TRP8iDbv3VshhKnOYCM8lz" +
		"s8QtBWFL#8gN8qen64skaQSVmUaETfaMMoSz7CYrEzjqH#96t6pMbS5nk0wZCDDyXdc89Lh" +
		"p40l5A1lKAsvr8eEQ0qD6liI8xQJV1fywAQYd8#BvNVxk9Y54iQj2vqTKkWhLVuE8xjC8xg" +
		"zby4OJoz$ECIw3ONCg7COiV92nBfVpnXTml3Ips4$YnparGxoonpajxIHLrdafK7MDnmNu4" +
		"AS4yIkB8ZLyUNwSoktv1PATr1Okkt57OzOjQ#TS09FK0nFZL$dH9m4ZtoBwQpE1Dc5MR8Ja" +
		"t4sRiSTc80xSHVkHYpbtP6E6UY87eYXl2ToaUstHJxwy1mEH7#UWY6ipO6u2ADmAKOJbsCi" +
		"9k9MJC8K#KxsuW7Cn8Du20$Z4RJyzDiXZTupw3kJdhFeEOUrdSjJaC#Rg83##x8U#Z62Nay" +
		"3U2SLHMpZrpS$Q$XE8lLI3XV$vRoZexYFfNotPKVXnNlK#RUVlelVJRTQLpJVSKVrTakPRH" +
		"ch9extLfUWMedKyWIqd68xoLr677#KOjQK9qZS99ueB#MXizEvNjPPkDdPUz4uDg$HNgihl" +
		"#PUdhLZY#NFsFkVxUV$9xTVdx#ty0Mr2xuhnuzhdzknwxONDvgzXNzVtRoDNRo5FKgdYlTo" +
		"DMlIn#hqy9z4n7EcTu7TUA#dyBOlf3o1$6JQkcaRpxcRdL#hRJ6xAHyZ9n0bbCLIfz900lc" +
		"n$DPKy1dBo34y0pvIdwWVRmTWtbG#EFcJP2HHHpG0hWwa7vFc0Tepf9MwNWl8Uvwy6D9dEH" +
		"d1yMXYCj69l1VyEbZ9yGBI9j95PdihQ9TDdINAzqB5wyxnSiLRJKGJAyWl9rrCEah9rX6TY" +
		"LNaJLAyUkLZlvgliSIh8IzPoUOJwUHLa#QJxYGjLB9Qqvgt4DmVRQMQRrLqjlsQj6t416A3" +
		"cgzLb4HR7se$R7pD8Heil2U8fZ3jDolw7A6$Ltqlbn6VS3pJehk7Q2Hs4Sqc$dP5zn8xMlY" +
		"idNsjEgnrQ6DCDjEFp0KUqzXdyjDi6XzIyiH8zidajt$RkIjEyMiL7MUILIZU38jDNN3$he" +
		"dAPYF7RtATZv9kyrCjHQtTciCHTKAT9qEieTwazvZoyHJ7ZuUx3yfFeqt#2oBneNAOh$pfP" +
		"#tf27EOQyER1$MJm$AFGVcKt#HN#GMMdnmAZBwMFR9Rlf8lvGlvN3QHiu$OOSW#3MXj9ve3" +
		"CrQviEg5RqYsoXPf5BupsImR#FoGM4FmjfAtvIrTmj56sIGVoMfvLzwH5N9GVfG31lyLMIe" +
		"laowLb#Gz#K6#b$toXYoNr#KrMIQl6ZeloX9PR8mMoIgfbm#aGTRBEbahxvFNr6PTtyW1#J" +
		"am#ucLVrZ#CiRwZLpBBu2B0BjYlQ$L2B3lqxyb6W5#4rm1LF6RCvXVbshgfdBUWZGJqcaxb" +
		"BOLf1MqB#Uu3$d1K4Jv80DWP#fcR#fcTnfDHB57ZMANgh5FrU5cjwgnyt0PwCrv3r8TcSn9" +
		"xwaAo1j6QeSyolI#f5WXbtEzuoWn8OF#CqXxXa0MOmsXNYNjAvbpDcaE#JfwSJpyNrioh0q" +
		"=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Accessibility = PUBLIC
			Action.NONE,  	// [1] Accessibility = 
			RETURN6,	// [2] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [3] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [4] Imports = 
			RETURN3,	// [5] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [6] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [7] Declarations = 
			Action.RETURN,	// [8] Declaration = Function
			Action.RETURN,	// [9] Declaration = Field
			Action.RETURN,	// [10] Declaration = Type_D
			RETURN9,	// [11] Function = Accessibility Type_Name ID LPAREN ParamList RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [12] Field = Accessibility Type_Name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [13] Type_D = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [14] Type_Name = Primitive
			Action.RETURN,	// [15] Type_Name = Array
			Action.RETURN,	// [16] Type_Name = ID
			Action.RETURN,	// [17] Primitive = VOID
			Action.RETURN,	// [18] Primitive = BOOLEAN
			Action.RETURN,	// [19] Primitive = INT
			RETURN3,	// [20] Array = Type_Name LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [21] ParamList = Parameter ParamListTail; returns 'ParamListTail' although none is marked
			RETURN3,	// [22] ParamListTail = COMMA Parameter ParamListTail; returns 'ParamListTail' although none is marked
			Action.NONE,  	// [23] ParamListTail = 
			RETURN2,	// [24] Parameter = Type_Name ID; returns 'ID' although none is marked
			Action.RETURN,	// [25] Statement = Local_Variable
			Action.RETURN,	// [26] Statement = Block_Statements
			Action.RETURN,	// [27] Statement = If_Statement
			Action.RETURN,	// [28] Statement = While_Statement
			Action.RETURN,	// [29] Statement = Break_Statement
			Action.RETURN,	// [30] Statement = Return_Statement
			Action.RETURN,	// [31] Statement = Expression_Statement
			RETURN2,	// [32] StatementList = Statement StatementListTail; returns 'StatementListTail' although none is marked
			RETURN2,	// [33] StatementListTail = Statement StatementListTail; returns 'StatementListTail' although none is marked
			Action.NONE,  	// [34] StatementListTail = 
			RETURN3,	// [35] Local_Variable = Type_Name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [36] Block_Statements = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN7,	// [37] If_Statement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [38] If_Statement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN5,	// [39] While_Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [40] Break_Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [41] Return_Statement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [42] Return_Statement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [43] Expression_Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [44] Expression = Assignment
			Action.RETURN,	// [45] Expression = RHS_Expression
			RETURN3,	// [46] Assignment = LHS_Expression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [47] LHS_Expression = Type_Name
			Action.RETURN,	// [48] LHS_Expression = Array_Access
			RETURN4,	// [49] Array_Access = LHS_Expression LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [50] RHS_Expression = Arithmetic_Expression
			RETURN3,	// [51] RHS_Expression = Arithmetic_Expression Compare Arithmetic_Expression; returns 'Arithmetic_Expression' although none is marked
			Action.RETURN,	// [52] Compare = EQEQ
			Action.RETURN,	// [53] Compare = NEQ
			Action.RETURN,	// [54] Compare = LT
			Action.RETURN,	// [55] Compare = LEQ
			Action.RETURN,	// [56] Compare = GT
			Action.RETURN,	// [57] Compare = GEQ
			new Action() {	// [58] Arithmetic_Expression = Arithmetic_Expression Add Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [59] Arithmetic_Expression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [60] Add = PLUS
			Action.RETURN,	// [61] Add = MINUS
			new Action() {	// [62] Term = Term Mul Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [63] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [64] Mul = TIMES
			Action.RETURN,	// [65] Mul = DIV
			Action.RETURN,	// [66] Mul = MOD
			RETURN2,	// [67] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [68] Factor = Primary_Expression
			Action.RETURN,	// [69] Primary_Expression = LHS_Expression
			Action.RETURN,	// [70] Primary_Expression = Function_Call
			Action.RETURN,	// [71] Primary_Expression = Array_Expression
			Action.RETURN,	// [72] Primary_Expression = STRING_LITERAL
			Action.RETURN,	// [73] Primary_Expression = INT_LITERAL
			Action.RETURN,	// [74] Primary_Expression = Boolean_Literal
			Action.RETURN,	// [75] Primary_Expression = Paren_Expression
			RETURN4,	// [76] Function_Call = ID LPAREN ExpressionList RPAREN; returns 'RPAREN' although none is marked
			RETURN2,	// [77] ExpressionList = Expression ExpressionListTail; returns 'ExpressionListTail' although none is marked
			RETURN3,	// [78] ExpressionListTail = COMMA Expression ExpressionListTail; returns 'ExpressionListTail' although none is marked
			Action.NONE,  	// [79] ExpressionListTail = 
			RETURN3,	// [80] Array_Expression = LBRACKET ExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [81] Boolean_Literal = TRUE
			Action.RETURN,	// [82] Boolean_Literal = FALSE
			RETURN3	// [83] Paren_Expression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
