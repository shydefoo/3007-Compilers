package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RCURLY = 9;
		static public final short VOID = 10;
		static public final short BOOLEAN = 11;
		static public final short INT = 12;
		static public final short RPAREN = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short IF = 16;
		static public final short WHILE = 17;
		static public final short BREAK = 18;
		static public final short RETURN = 19;
		static public final short COMMA = 20;
		static public final short RBRACKET = 21;
		static public final short PUBLIC = 22;
		static public final short EQL = 23;
		static public final short IMPORT = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9p5LcbOL5KOVkyCIqF2Q20AALOaYme8YAQ463k2eD7caccBfGcQAuMQgIdWKd$gwKU$wcz" +
		"bjY#sx$k#sQQL5bbQcgQcVBttpd6w7EOEm$8ytNdU#txd#zxlR7FkEGTmtO$PACHqLE4gpC" +
		"4rk1OpK8JbAC1496Cb6Z4OGp0KIHY6St0kpaD$opi0voE#ozn4BNSsgZLz2L9OKqAlQoh3p" +
		"RW5JJYxs#EPYLcu4klOY$GkSxCwzIAuFhkR#h6QVYgkmm9KOYwknWsOBz#fKRgG9WzW978m" +
		"3kCTLMwgZZYfqA9KKq9IDI0DannLOKhLIbMzeofSgLgeYdJi$IcVIlvcluxwLO5cxX9hvfm" +
		"ZUlk#V$eiN8muJEWKNO#1c1UmjWp7TiOuHl8T8nSvHceS8vSxHcuCE5AztD2bmlVF34Azx9" +
		"RlCHof685HM8J5k0bBi1JBEcLKQ5#W7f$SHRotPI$EG3z48uPMbB9kixwYJ7Wm6gM8i4Lyu" +
		"ol6cKgpIjga3Rd8GooL5s0DVnTY0yhvFTHY6kfm6Mx5fRY2N8xhiGAhiL3sOwtyYjkn4PlG" +
		"ZCtOWgqmdrRkOgbSrUcSjP6Sjmps8OjzoERgpUKgoUENFOwjZEUwosSx1Sfhy4ikxdPk8Br" +
		"Pq#G#g2cACzIl1pKbSkSTqeVZwKkzsIitzwXmheX8hXgF6cKIryLKdcS3k2V4EgeCgZoEgd" +
		"YbSeMa2gDgaACgHga6qqfmL9KfLNpG5g5KdWugvvbpZkWr#$vfDx$kQ7vVUjJBzgfxrCx$7" +
		"z77efV3kbISdlC4miFpnCktMvtboRnX3E#KeVUck$7UbYVoJ9d4Cwd8Plc#ecZkUyDuFwkr" +
		"HNpZgs74fwcWAfhrHNFNBE5eu$ZpyWPJobO6MluuQghuYwFFd8zAAyDy6$mImgqLv4MPyE6" +
		"w1xQjjJPKx2H#0umu8eP89dA82lhtaOl9nycbfluq0DTylXBfNqwUGQudLj8#J3wbwdwFjf" +
		"1tKmzxlWu#XTGUyTd6ISKHp7Ehzg9ORYBF8YUGgycZL8n#Omzv2RbG#PQgEXQgyWgjlNR6s" +
		"fJc0768y18dw9X7VQpAIxQDUIEHIonJvKr4Fh56bHiLSyvSg$xBCsO66xishrN4QirNHpI7" +
		"cByXI6mHqSB#yFzqBIOsqxdE5h#7M4$SJMor#UybxY1QRVEtnMOVP2p9fazMF5hl0nVVNfi" +
		"kr#RVPREFgNg7XZBcpkD4KSUoCLVvvoXkjCKQbEzEBQV9kNwZMVK$ZQ$#v09o7hc8iQCg5g" +
		"7btAMLCsppKAnyzz4kiVchGn#pCI60Rtke#S7hTbKfBYLgUf0$tSVO1lN8Fz9kSRl22Jakn" +
		"w0zyfVV#bdsoLxvINwK7sIFvU6U9TzQrZT#rIxYQt$fA#9BuWlYS$bKFf5dQNqix$FDdKbU" +
		"9rucdfETPeJM1$AHnO$93dcKl4CUaG$bDNbHNf3dvILvHfwMf#H9UK8UjtGFotPvoB8Ub5V" +
		"b5NbNtf6tvIrvKzwWxpFvK$wGWt90Vkymgb$aiDy#9ABcuoIfZYU0GO2tfGZUFy88SsSq$A" +
		"ZbHbfk0JmfF3mhmdXQHF2KC2oCiI6Fvy8KQYl9bTHNq1vBlnEAhPkj2V1Uv#RDpisxNIGHp" +
		"XjUEEzuBjxoJBXvrtFnB3SiPBESIZQHnlwOvtiEVJNaGCXYpBn7boXaifn9BhKXXVMdaDE3" +
		"O0JRggQkYldSDNbkktbo6nOoQ4$x5rJpTXm=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Accessibility = PUBLIC
			Action.NONE,  	// [1] Accessibility = 
			RETURN6,	// [2] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [3] Imports = IMPORT ID SEMICOLON Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [4] Imports = 
			Action.RETURN,	// [5] Declaration = Function
			Action.RETURN,	// [6] Declaration = Field
			Action.RETURN,	// [7] Declaration = Type_D
			RETURN2,	// [8] Declarations = Declaration DeclarationTail; returns 'DeclarationTail' although none is marked
			RETURN2,	// [9] DeclarationTail = Declaration DeclarationTail; returns 'DeclarationTail' although none is marked
			Action.NONE,  	// [10] DeclarationTail = 
			RETURN9,	// [11] Function = Accessibility Type_Name ID LPAREN ParamList RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [12] Field = Accessibility Type_Name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [13] Type_D = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [14] Type_Name = Primitive
			Action.RETURN,	// [15] Type_Name = Array
			Action.RETURN,	// [16] Primitive = VOID
			Action.RETURN,	// [17] Primitive = BOOLEAN
			Action.RETURN,	// [18] Primitive = INT
			RETURN3,	// [19] Array = Type_Name LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [20] ParamList = Parameter ParamListTail; returns 'ParamListTail' although none is marked
			RETURN3,	// [21] ParamListTail = COMMA Parameter ParamListTail; returns 'ParamListTail' although none is marked
			Action.NONE,  	// [22] ParamListTail = 
			RETURN2,	// [23] Parameter = Type_Name ID; returns 'ID' although none is marked
			Action.RETURN,	// [24] Statement = Local_Variable
			Action.RETURN,	// [25] Statement = Block_Statements
			Action.RETURN,	// [26] Statement = If_Statement
			Action.RETURN,	// [27] Statement = While_Statement
			Action.RETURN,	// [28] Statement = Break_Statement
			Action.RETURN,	// [29] Statement = Return_Statement
			Action.RETURN,	// [30] Statement = Expression_Statement
			RETURN2,	// [31] StatementList = Statement StatementListTail; returns 'StatementListTail' although none is marked
			RETURN2,	// [32] StatementListTail = Statement StatementListTail; returns 'StatementListTail' although none is marked
			Action.NONE,  	// [33] StatementListTail = 
			RETURN3,	// [34] Local_Variable = Type_Name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [35] Block_Statements = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN7,	// [36] If_Statement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [37] If_Statement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN5,	// [38] While_Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [39] Break_Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [40] Return_Statement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [41] Return_Statement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [42] Expression_Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [43] Expression = Assignment
			Action.RETURN,	// [44] Expression = RHS_Expression
			RETURN3,	// [45] Assignment = LHS_Expression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [46] LHS_Expression = ID
			Action.RETURN,	// [47] LHS_Expression = Array_Access
			RETURN4,	// [48] Array_Access = LHS_Expression LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [49] RHS_Expression = Arithmetic_Expression
			RETURN3,	// [50] RHS_Expression = Arithmetic_Expression Compare Arithmetic_Expression; returns 'Arithmetic_Expression' although none is marked
			Action.RETURN,	// [51] Compare = EQEQ
			Action.RETURN,	// [52] Compare = NEQ
			Action.RETURN,	// [53] Compare = LT
			Action.RETURN,	// [54] Compare = LEQ
			Action.RETURN,	// [55] Compare = GT
			Action.RETURN,	// [56] Compare = GEQ
			new Action() {	// [57] Arithmetic_Expression = Arithmetic_Expression Add Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [58] Arithmetic_Expression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [59] Add = PLUS
			Action.RETURN,	// [60] Add = MINUS
			new Action() {	// [61] Term = Term Mul Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [62] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [63] Mul = TIMES
			Action.RETURN,	// [64] Mul = DIV
			Action.RETURN,	// [65] Mul = MOD
			RETURN2,	// [66] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [67] Factor = Primary_Expression
			Action.RETURN,	// [68] Primary_Expression = LHS_Expression
			Action.RETURN,	// [69] Primary_Expression = Function_Call
			Action.RETURN,	// [70] Primary_Expression = Array_Expression
			Action.RETURN,	// [71] Primary_Expression = STRING_LITERAL
			Action.RETURN,	// [72] Primary_Expression = INT_LITERAL
			Action.RETURN,	// [73] Primary_Expression = Boolean_Literal
			Action.RETURN,	// [74] Primary_Expression = Paren_Expression
			RETURN4,	// [75] Function_Call = ID LPAREN ExpressionList RPAREN; returns 'RPAREN' although none is marked
			RETURN2,	// [76] ExpressionList = Expression ExpressionListTail; returns 'ExpressionListTail' although none is marked
			RETURN3,	// [77] ExpressionListTail = COMMA Expression ExpressionListTail; returns 'ExpressionListTail' although none is marked
			Action.NONE,  	// [78] ExpressionListTail = 
			RETURN3,	// [79] Array_Expression = LBRACKET ExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [80] Boolean_Literal = TRUE
			Action.RETURN,	// [81] Boolean_Literal = FALSE
			RETURN3	// [82] Paren_Expression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
