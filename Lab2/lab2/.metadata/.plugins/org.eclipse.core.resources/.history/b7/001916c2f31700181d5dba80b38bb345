// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
//%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */
Accessibility = PUBLIC
	|
	;

Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import ImportTail;
Import = IMPORT ID SEMICOLON
	;
ImportTail = Import ImportTail
	|
	;
	
Declaration = Function | Field | Type_D;

Declarations = Declaration DeclarationTail;

DeclarationTail = Declaration DeclarationTail
	|
	;

Function = Accessibility Type_Name ID LPAREN ParamList RPAREN LCURLY StatementList RCURLY;

Field = Accessibility Type_Name ID SEMICOLON;

Type_D = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;

Type_Name = Primitive 
		| Array 
		| ID
		;

Primitive = VOID | BOOLEAN | INT;

Array = Type_Name LBRACKET RBRACKET;

ParamList = Parameter ParamListTail;

ParamListTail = COMMA Parameter ParamListTail
	| 
	;

Parameter = Type_Name ID;

Statement = Local_Variable
	| Block_Statements
	| If_Statement
	| While_Statement
	| Break_Statement
	| Return_Statement
	| Expression_Statement
	;

StatementList = Statement StatementListTail;

StatementListTail = Statement StatementListTail
	|
	;

Local_Variable = Type_Name ID SEMICOLON;

Block_Statements = LCURLY StatementList RCURLY;

If_Statement = IF LPAREN Expression RPAREN Statement ELSE Statement
	| IF LPAREN Expression RPAREN Statement
	;

While_Statement = WHILE LPAREN Expression RPAREN Statement;

Break_Statement = BREAK SEMICOLON;

Return_Statement = RETURN SEMICOLON
	| RETURN Expression SEMICOLON
	;

Expression_Statement = Expression SEMICOLON;

Expression = Assignment
	| RHS_Expression
	;
	
Assignment = LHS_Expression EQL Expression;

LHS_Expression = Type_Name
	| Array_Access
	;
	
Array_Access = LHS_Expression LBRACKET Expression RBRACKET;

RHS_Expression = Arithmetic_Expression
	| Arithmetic_Expression Compare Arithmetic_Expression
	;
	
Compare = EQEQ
	| NEQ
	| LT
	| LEQ
	| GT
	| GEQ
	;
	
Arithmetic_Expression = Arithmetic_Expression Add Term
	| Term
	;
	
Add = PLUS
	| MINUS
	;
	
Term = Term Mul Factor
	| Factor
	;
	
Mul = TIMES
	| DIV
	| MOD
	;
	
Factor = MINUS Factor
	| Primary_Expression
	;

Primary_Expression = LHS_Expression
	| Function_Call
	| Array_Expression
	| STRING_LITERAL
	| INT_LITERAL
	| Boolean_Literal
	| Paren_Expression
	;
	
Function_Call = ID LPAREN ExpressionList RPAREN;

ExpressionList = Expression ExpressionListTail;

ExpressionListTail = COMMA Expression ExpressionListTail
	|
	;
	
Array_Expression = LBRACKET ExpressionList RBRACKET;

Boolean_Literal = TRUE
	| FALSE
	;

Paren_Expression = LPAREN Expression RPAREN;


/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
/*Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;*/